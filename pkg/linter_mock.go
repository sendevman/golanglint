// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/analyze/linters/linter.go

package linters

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	result "github.com/golangci/golangci-lint/pkg/result"
	executors "github.com/golangci/golangci-shared/pkg/executors"
)

// MockLinter is a mock of Linter interface
type MockLinter struct {
	ctrl     *gomock.Controller
	recorder *MockLinterMockRecorder
}

// MockLinterMockRecorder is the mock recorder for MockLinter
type MockLinterMockRecorder struct {
	mock *MockLinter
}

// NewMockLinter creates a new mock instance
func NewMockLinter(ctrl *gomock.Controller) *MockLinter {
	mock := &MockLinter{ctrl: ctrl}
	mock.recorder = &MockLinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLinter) EXPECT() *MockLinterMockRecorder {
	return _m.recorder
}

// Run mocks base method
func (_m *MockLinter) Run(ctx context.Context, exec executors.Executor) (*result.Result, error) {
	ret := _m.ctrl.Call(_m, "Run", ctx, exec)
	ret0, _ := ret[0].(*result.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (_mr *MockLinterMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockLinter)(nil).Run), arg0, arg1)
}

// Name mocks base method
func (_m *MockLinter) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockLinterMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockLinter)(nil).Name))
}
