// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/analyze/executors/executor.go

package executors

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return _m.recorder
}

// Run mocks base method
func (_m *MockExecutor) Run(ctx context.Context, name string, args ...string) (string, error) {
	_s := []interface{}{ctx, name}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Run", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (_mr *MockExecutorMockRecorder) Run(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockExecutor)(nil).Run), _s...)
}

// WithEnv mocks base method
func (_m *MockExecutor) WithEnv(k string, v string) Executor {
	ret := _m.ctrl.Call(_m, "WithEnv", k, v)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithEnv indicates an expected call of WithEnv
func (_mr *MockExecutorMockRecorder) WithEnv(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithEnv", reflect.TypeOf((*MockExecutor)(nil).WithEnv), arg0, arg1)
}

// SetEnv mocks base method
func (_m *MockExecutor) SetEnv(k string, v string) {
	_m.ctrl.Call(_m, "SetEnv", k, v)
}

// SetEnv indicates an expected call of SetEnv
func (_mr *MockExecutorMockRecorder) SetEnv(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEnv", reflect.TypeOf((*MockExecutor)(nil).SetEnv), arg0, arg1)
}

// WorkDir mocks base method
func (_m *MockExecutor) WorkDir() string {
	ret := _m.ctrl.Call(_m, "WorkDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkDir indicates an expected call of WorkDir
func (_mr *MockExecutorMockRecorder) WorkDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WorkDir", reflect.TypeOf((*MockExecutor)(nil).WorkDir))
}

// WithWorkDir mocks base method
func (_m *MockExecutor) WithWorkDir(wd string) Executor {
	ret := _m.ctrl.Call(_m, "WithWorkDir", wd)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithWorkDir indicates an expected call of WithWorkDir
func (_mr *MockExecutorMockRecorder) WithWorkDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WithWorkDir", reflect.TypeOf((*MockExecutor)(nil).WithWorkDir), arg0)
}

// Clean mocks base method
func (_m *MockExecutor) Clean() {
	_m.ctrl.Call(_m, "Clean")
}

// Clean indicates an expected call of Clean
func (_mr *MockExecutorMockRecorder) Clean() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Clean", reflect.TypeOf((*MockExecutor)(nil).Clean))
}
